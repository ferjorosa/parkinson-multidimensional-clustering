/**
 * 
 */
package org.latlab.core.learner.geast;

import cern.colt.matrix.DoubleMatrix1D;
import cern.colt.matrix.DoubleMatrix2D;
import org.latlab.core.data.MixedDataSet;
import org.latlab.core.graph.AbstractNode;
import org.latlab.core.model.*;
import org.latlab.core.util.Normal;

import java.util.Random;

/**
 * Generates parameters for the nodes in a Bayesian network.
 * 
 * @author leonard
 * 
 */
public class ParameterGenerator {
    private final MixedDataSet data;
    private final Normal normal;
    private final DoubleMatrix2D covariance;
    private Random random = new Random(2);
    
    private BeliefNode.Visitor<Void> visitor = new BeliefNode.Visitor<Void>() {
        public Void visit(ContinuousBeliefNode node) {
            generate(node);
            return null;
        }

        public Void visit(DiscreteBeliefNode node) {
            generate(node);
            return null;
        }
    };


    public ParameterGenerator(MixedDataSet data) {
        this.data = data;
        normal = new Normal(data.mean(), data.covariance());
        covariance = data.covariance();
    }

    public ParameterGenerator(MixedDataSet data, long seed) {
        this.data = data;
        normal = new Normal(data.mean(), data.covariance());
        covariance = data.covariance();
        this.random = new Random(seed);
    }

    public void generate(BayesNet model) {
        for (AbstractNode node : model.getNodes()) {
            ((BeliefNode) node).accept(visitor);
        }
    }
    
    public void generate(BeliefNode node) {
        node.accept(visitor);
    }

    public void generate(DiscreteBeliefNode node) {
        //node.generateRandomParameters();
        node.generateRandomParameters(this.random);
    }

    public void setRandom(Random random) {
        this.random = random;
    }

    /**
     * Generates the mean according to the distribution of the data. Uses the
     * covariance of the data set as the initial covariance.
     * 
     * <p>
     * Assumes the data set D ~ N(M,V). The mean vector is generated by drawing
     * from N(M,V), and the covariance is generated by assigning it to V.
     * 
     * @param node
     *            node to generate parameters on
     */
    public void generate(ContinuousBeliefNode node) {
        CGPotential potential = node.potential();
        int[] indices = data.indicesOf(potential.continuousVariables());

        for (int i = 0; i < potential.size(); i++) {
            DoubleMatrix1D mean = normal.generate(indices);
            CGParameter parameter = potential.get(i);
            parameter.p = 1;
            parameter.A.assign(mean);
            parameter.C.assign(covariance.viewSelection(indices, indices));
        }
    }
}
